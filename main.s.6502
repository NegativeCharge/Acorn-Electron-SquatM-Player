;SquatM beeper music engine
;Originally written by Shiru 06'17 for ZX Spectrum 48K
;Ported to Atari 8-bit by Shiru 07'21
;Ported to the Acorn Electron by Negative Charge 11'22
;Optimisations of the Acorn Electron version by 0xC0DE 11'22

INCLUDE "constants.h.6502"

ORG     ZERO_PAGE
GUARD   $9f

INCLUDE "lib\os.h.6502"

.vars_start

.pattern_ptr                            SKIP 2
.sample_ptr                             SKIP 2
.sample_mask                            SKIP 1        ;$00 or $80
.sample_bit                             SKIP 1
.sample_out                             SKIP 1
.row_length                             SKIP 1
.row_flags                              SKIP 1
.ch0_acc                                SKIP 2
.ch1_acc                                SKIP 2
.ch2_acc                                SKIP 2
.ch3_acc                                SKIP 2
.ch_mixer                               SKIP 1
.ch_acc                                 SKIP 1
.noise_acc                              SKIP 2
.noise_add_hi                           SKIP 1
.noise_pitch                            SKIP 1
.noise_volume                           SKIP 1
.temp                                   SKIP 1
.temp2                                  SKIP 1

.vars_end

ORG     BASE
GUARD   SCREEN

.start
    INCLUDE "lib\os.s.6502"

.play
    
    sei                        ;Disable interrupts

.init
    lda     #$00
    sta     SHEILA_COUNTER     ;Zero the ULA SHEILA counter (FE06), creating a toggle speaker (inaudible frequency)
    tax
    tay
.clear_vars
    sta     vars_start,x
    inx
    cpx     #vars_end-vars_start
    bne     clear_vars

    jsr     printTrackMetadata
    
    \ Load track into memory
    lda     file_number
    asl     a
    asl     a
    asl     a                  ; track_filenumber * 8 bytes per filename

    \ Load sample data
	clc
	adc     #LO(sample_filenames)
	sta     file_name + 0
	lda     #HI(sample_filenames)
	adc     #0
	sta     file_name + 1

    lda     #LO(sample_list)
    sta     file_address + 0
    lda     #HI(sample_list)
    sta     file_address + 1

    jsr     loadFile

    lda     file_number
    asl     a
    asl     a
    asl     a                  ; track_filenumber * 8 bytes per filename

    \ Load track data
	clc
	adc     #LO(track_filenames)
	sta     file_name + 0
	lda     #HI(track_filenames)
	adc     #0
	sta     file_name + 1

    lda     #LO(music_data)
    sta     file_address + 0
    lda     #HI(music_data)
    sta     file_address + 1

    jsr     loadFile

    lda     #LO(music_data+2)
    sta     pattern_ptr+0
    lda     #HI(music_data+2)
    sta     pattern_ptr+1
    bne     play_loop          ;jump always

.end_track
    \\ Increment file in table
    ldx     file_number
    inx
    cpx     #NUM_TRACKS
    bcc     file_number_set
    ldx     #0
.file_number_set
    stx     file_number
    jmp     init

.return_loop
    lda     music_data+0
    sta     pattern_ptr+0
    lda     music_data+1
    sta     pattern_ptr+1

.play_loop

    ldy     #0
    lda     (pattern_ptr),y    ;flags DDDN4321 (Drum, Noise, 1-4 channel update)
    sta     row_flags
    iny
    lda     (pattern_ptr),y    ;duration of the row (0=loop), bit 7 percussion
    beq     end_track
    
    sta     row_length
    iny
    
    lsr     row_flags
    bcc     skip_note_0
    
    lda     (pattern_ptr),y
    iny
    sta     sm_ch0_add0+1
    lda     (pattern_ptr),y
    iny
    sta     sm_ch0_add1+1
    
.skip_note_0

    lsr     row_flags
    bcc     skip_note_1
    
    lda     (pattern_ptr),y
    iny
    sta     sm_ch1_add0+1
    lda     (pattern_ptr),y
    iny
    sta     sm_ch1_add1+1

.skip_note_1

    lsr     row_flags
    bcc     skip_note_2
    
    lda     (pattern_ptr),y
    iny
    sta     sm_ch2_add0+1
    lda     (pattern_ptr),y
    iny
    sta     sm_ch2_add1+1

.skip_note_2

    lsr     row_flags
    bcc     skip_note_3
    
    lda     (pattern_ptr),y
    iny
    sta     sm_ch3_add0+1
    lda     (pattern_ptr),y
    iny
    sta     sm_ch3_add1+1

.skip_note_3

    lsr     row_flags
    bcc     skip_mode_change

    ldx     #OP_NOP
    lda     (pattern_ptr),y
    beq     L4
    ldx     #OP_ROL_A
.L4
    stx     noise_opcode+0
    iny
    iny
    
.skip_mode_change

    ldx     row_flags
    beq     skip_drum
    lda     sample_list-1,x
    sta     sample_ptr+0
    lda     sample_list+6,x
    sta     sample_ptr+1
    lda     #$80
    sta     sample_mask

.skip_drum

    lda     row_length
    bpl     skip_percussion
    
    and     #$7f                   ;clear percussion flag
    sta     row_length

    lda     (pattern_ptr),y        ;read noise volume
    iny
    sta     noise_volume
    
    lda     (pattern_ptr),y        ;read noise pitch
    iny

    sty     temp

    sta     noise_pitch
    tay                            ;used to be noise_div
    
    lda     #<2174                 ;utz's rand seed
    sta     noise_acc+0
    lda     #>2174
    sta     noise_add_hi
    sta     noise_acc+1
    ldx     #COUNT

; -- 37+14+5 = 56c -------------------------------------------------------------------------------------------

.noise_loop

    dey                            ;2
    beq     noise_update           ;2/3
    ;~5

.noise_skip

    FOR n, 1, 6
      rol temp2                    ;5 dummy
    NEXT
    jmp     noise_next             ;3
    ; 2+2+6*5+3 = 37c
    
.noise_update

    lda     noise_acc+0            ;3
    adc     #<2174                 ;2 // utz's rand seed
    sta     noise_acc+0            ;3
    lda     noise_acc+1            ;3
    adc     noise_add_hi           ;3
    cmp     #$80                   ;2
    rol     a                      ;2
    sta     noise_acc+1            ;3
    inc     noise_add_hi           ;5
    ldy     noise_pitch            ;3
    ;32c // 2+3+32 = 37c
    
.noise_next

    lda     noise_volume           ;3
    cmp     noise_acc+1            ;3 C=0 --> sound off, C=1 --> sound on
    lda     #SPEAKER_OFF           ;2
    adc     #0                     ;2
    sta     SHEILA_MISC_CONTROL    ;4
    ;14c

    dex                            ;2
    bne     noise_loop             ;2/3
    ;~5c

; ------------------------------------------------------------------------------------------------

    ldy     temp

.skip_percussion

    tya
    clc
    adc     pattern_ptr+0
    sta     pattern_ptr+0
    bcc     L8
    inc     pattern_ptr+1
.L8
    lda     sample_mask
    sta     sample_bit

.sound_loop_0

    ldx     #CYCLES
    ldy     #0                    ;sample ptr inside the loop

 ; -- (37c)+120c ------------------------------------------------------------------------------------------  

.sound_loop

    lda     (sample_ptr),y        ;5+ // it's okay if sample_ptr is not valid
    and     sample_bit            ;3    
    beq     spkr_off              ;2/3
    lda     #SPEAKER_ON           ;2
    bne     spkr_set              ;3 jump always
.spkr_off
    lda     #SPEAKER_OFF          ;2
.spkr_set
    sta     sample_out            ;3
    ;16

    lda     sample_mask           ;3 preload
    lsr     sample_bit            ;5
    lsr     sample_bit            ;5 drop every other sample bit!
    beq     sample_inc            ;2/3
    sta     temp                  ;3 dummy
    bne     sample_next           ;3 jump always
.sample_inc
    sta     sample_bit            ;3
    iny                           ;2
.sample_next
    ;16
    ;16+16=32
    lda     #0                    ;2
    sta     ch_mixer              ;3
    ;5

    lda     ch0_acc+0             ;3
.sm_ch0_add0
    adc     #0                    ;2 selfmod
    sta     ch0_acc+0             ;3
    lda     ch0_acc+1             ;3
.sm_ch0_add1
    adc     #0                    ;2 selfmod
    rol     ch_mixer              ;5
    sta     ch0_acc+1             ;3
    ;21
    
    lda     ch1_acc+0             ;3
.sm_ch1_add0
    adc     #0                    ;2 selfmod
    sta     ch1_acc+0             ;3
    lda     ch1_acc+1             ;3
.sm_ch1_add1
    adc     #0                    ;2 selfmod
    rol     ch_mixer              ;5
    sta     ch1_acc+1             ;3
    ;21
    
    lda     ch2_acc+0             ;3
.sm_ch2_add0
    adc     #0                    ;2 selfmod
    sta     ch2_acc+0             ;3
    lda     ch2_acc+1             ;3
.sm_ch2_add1
    adc     #0                    ;2 selfmod
    rol     ch_mixer              ;5
    sta     ch2_acc+1             ;3
    ;21

    lda     ch3_acc+0             ;3
.sm_ch3_add0
    adc     #0                    ;2 selfmod
    sta     ch3_acc+0             ;3
    lda     ch3_acc+1             ;3
.sm_ch3_add1
    adc     #0                    ;2 selfmod
    rol     ch_mixer              ;5
    cmp     #$80                  ;2 needed for rol a, to match Z80's srl h
    ;20

.noise_opcode
    nop                           ;2 nop or rol a, self-modifying code here!
    sta     ch3_acc+1             ;3
    ;5
    
    ;(37)+5+21+21+21+20+5 = (37)+93

    lda     ch_acc                ;3
    clc                           ;2
    adc     ch_mixer              ;3
    bne     speaker_on            ;2/3
    nop                           ;2 dummy
    lda     sample_out            ;3
    bne     set_speaker           ;3 jump always
.speaker_on
    adc     #$ff                  ;2
    sta     ch_acc                ;3
    lda     #SPEAKER_ON           ;2
.set_speaker
    sta     SHEILA_MISC_CONTROL   ;4
    ;22

    dex                           ;2
    bne     sound_loop            ;2/3
    ;~5

    ;(37)+93+22+5 = (37)+120

; ------------------------------------------------------------------------------------------------

    dey
    lda     (sample_ptr),y        ;it's okay if sample_ptr is not valid
    cmp     #$15                  ;end of sample marker - must not appear anywhere else in the sample data
    bne     sample_no_stop

    lda     #0                    ;disable sample reading
    sta     sample_mask

.sample_no_stop

    tya
    sec                           ;(!)
    adc     sample_ptr+0
    sta     sample_ptr+0
    bcc     L13
    inc     sample_ptr+1
.L13
    dec     row_length
    beq     L14
    jmp     sound_loop_0
.L14
    jmp     play_loop
   
.track_names
    EQUS "Let's Go      ",13
    EQUS "Squat Party   ",13
    EQUS "Geostorm      ",13
    EQUS "High Orbit    ",13
    EQUS "Standing Wave ",13
    EQUS "Freezing Point",13
.track_artists
    EQUS "@shiru8bit",13
    EQUS "@djh0ffman",13
    EQUS "@shiru8bit",13
    EQUS "@shiru8bit",13
    EQUS "@shiru8bit",13
    EQUS "@shiru8bit",13
.track_filenames
    EQUS ":0.$.T1", 13
    EQUS ":0.$.T2", 13
    EQUS ":0.$.T3", 13
    EQUS ":0.$.T4", 13
    EQUS ":0.$.T5", 13
    EQUS ":0.$.T6", 13
.sample_filenames
    EQUS ":0.$.S1", 13
    EQUS ":0.$.S2", 13
    EQUS ":0.$.S3", 13
    EQUS ":0.$.S4", 13
    EQUS ":0.$.S5", 13
    EQUS ":0.$.S6", 13
.file_number
    EQUB 5
.strLen
    EQUB 0

.end_of_code

ORG SAMPLES
.sample_list

ORG MUSIC
.music_data

.end

SAVE "MAIN",start,end,play

\ ******************************************************************
\ *    Memory Info
\ ******************************************************************

PRINT "-----------------------"
PRINT "  1-BIT SQUATM PLAYER  "
PRINT "-----------------------"
PRINT "CODE size       = ", ~end-start
PRINT "END OF CODE     = ", ~end_of_code
PRINT "-----------------------"
PRINT "HIGH WATERMARK  = ", ~P%
PRINT "FREE            = ", ~start+end
PRINT "-----------------------"

\ ******************************************************************
\ * Supporting Files
\ ******************************************************************

PUTBASIC "loader.bas","LOADER"
PUTFILE  "screens\bgrnd.bin","BGRND",&5800
PUTFILE  "BOOT","!BOOT",&FFFF

\ ******************************************************************
\ * Samples
\ ******************************************************************
PUTFILE ".\tracks\shiru.lets_go.samples.bin", "S1", sample_list
PUTFILE ".\tracks\dj.h0ffman.squat_party.samples.bin", "S2", sample_list
PUTFILE ".\tracks\shiru.geostorm.samples.bin", "S3", sample_list
PUTFILE ".\tracks\shiru.high_orbit.samples.bin", "S4", 5
PUTFILE ".\tracks\shiru.standing_wave.samples.bin", "S5", sample_list
PUTFILE ".\tracks\shiru.freezing_point.samples.bin", "S6", sample_list

\ ******************************************************************
\ * Tracks
\ ******************************************************************
PUTFILE ".\tracks\shiru.lets_go.track.bin", "T1", music_data
PUTFILE ".\tracks\dj.h0ffman.squat_party.track.bin", "T2", music_data
PUTFILE ".\tracks\shiru.geostorm.track.bin", "T3", music_data
PUTFILE ".\tracks\shiru.high_orbit.track.bin", "T4", music_data
PUTFILE ".\tracks\shiru.standing_wave.track.bin", "T5", music_data
PUTFILE ".\tracks\shiru.freezing_point.track.bin", "T6", music_data